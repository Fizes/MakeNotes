<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ns0="clr-namespace:Dragablz;assembly=Dragablz" xmlns:ns1="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf" xmlns:ns2="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf">
  <Style x:Key="MainWindow" TargetType="{x:Type Window}">
    <Setter Property="MinWidth" Value="640"/>
    <Setter Property="MinHeight" Value="480"/>
    <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
    <Setter Property="TextElement.Foreground" Value="{StaticResource MaterialDesignBody}"/>
    <Setter Property="TextElement.FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"/>
    <Setter Property="UseLayoutRounding" Value="True"/>
    <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
    <Setter Property="Template" Value="{DynamicResource WindowTemplate}"/>
    <Setter Property="WindowChrome.WindowChrome">
      <Setter.Value>
        <WindowChrome CornerRadius="0" GlassFrameThickness="1" UseAeroCaptionButtons="False" NonClientFrameEdges="None"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Navbar" TargetType="{x:Type Grid}">
    <Setter Property="Background" Value="{StaticResource NavbarBackgroundBrush}"/>
  </Style>
  <Style x:Key="NavbarTitle" TargetType="{x:Type TextBlock}">
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Margin" Value="0,12,0,6"/>
    <Setter Property="FontSize" Value="20"/>
  </Style>
  <Style x:Key="NavbarTabControl" TargetType="{x:Type ns0:TabablzControl}" BasedOn="{StaticResource MaterialDesignTabablzControlStyle}">
    <Setter Property="Margin" Value="0,-0.5,0,0.5"/>
    <Setter Property="FontSize" Value="16"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource NavbarTabControlItemContainerStyle}"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavbarPopupBox" TargetType="{x:Type ns1:PopupBox}">
    <Setter Property="HorizontalAlignment" Value="Right"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="PlacementMode" Value="BottomAndAlignRightEdges"/>
    <Setter Property="Margin" Value="12,12,12,6"/>
    <Setter Property="StaysOpen" Value="False"/>
  </Style>
  <Style x:Key="TransparentMiniButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="Height" Value="24"/>
    <Setter Property="Width" Value="24"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background">
          <Setter.Value>
            <SolidColorBrush Color="White" Opacity="0.1"/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="NavbarAddTabButton" TargetType="{x:Type Button}" BasedOn="{StaticResource TransparentMiniButton}">
    <Setter Property="Margin" Value="10,0,10,3"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="ToolTip" Value="Add new tab"/>
    <Setter Property="Content">
      <Setter.Value>
        <ns1:PackIconExtension Kind="Plus" Size="20"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalAdjustedDialogHostPopup" TargetType="{x:Type ns2:PopupEx}" BasedOn="{StaticResource MaterialDesignDialogHostPopup}">
    <Setter Property="VerticalOffset" Value="-100"/>
  </Style>
  <Style TargetType="{x:Type ns1:DialogHost}" BasedOn="{StaticResource {x:Type ns1:DialogHost}}">
    <Setter Property="PopupStyle" Value="{StaticResource VerticalAdjustedDialogHostPopup}"/>
  </Style>
  <Style x:Key="RegularFloatingActionPopupBox" TargetType="{x:Type ns1:PopupBox}" BasedOn="{StaticResource MaterialDesignMultiFloatingActionPopupBox}">
    <Setter Property="Background" Value="{StaticResource ActionPopupBoxBackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ActionPopupBoxBackgroundBrush}"/>
    <Setter Property="PlacementMode" Value="TopAndAlignCentres"/>
    <Setter Property="HorizontalAlignment" Value="Right"/>
    <Setter Property="VerticalAlignment" Value="Bottom"/>
    <Setter Property="Margin" Value="18"/>
  </Style>
  <Style x:Key="DataGridAddRowButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedAccentButton}">
    <Setter Property="BorderBrush" Value="{StaticResource SecondaryButtonBorderBrush}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Foreground" Value="{StaticResource SecondaryButtonForegroundBrush}"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#F6F9FE"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridTextColumnEditingStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Padding" Value="0,-1"/>
    <Setter Property="DataGridCell.ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
  </Style>
  <Style x:Key="DataGridTextColumnElementStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Grid ToolTipService.InitialShowDelay="0" ToolTip="{Binding .CurrentItem.ErrorContent}" Background="Transparent">
            <ns1:PackIcon Foreground="{StaticResource ValidationErrorBrush}" Kind="AlertCircleOutline"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="IBeam"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridToolButtonCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
    <Setter Property="Focusable" Value="False"/>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="Transparent"/>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="Transparent"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="Transparent"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="Transparent"/>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="Transparent"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="Transparent"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEditing" Value="True"/>
          <Condition Property="IsKeyboardFocusWithin" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush">
          <Setter.Value>
            <SolidColorBrush Opacity="0.55">
              <SolidColorBrush.Color>
                <Binding Path="Color" Source="{StaticResource PrimaryHueMidBrush}"/>
              </SolidColorBrush.Color>
            </SolidColorBrush>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StretchedReadonlyDataGrid" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
    <Setter Property="ColumnWidth" Value="*"/>
    <Setter Property="CanUserReorderColumns" Value="False"/>
    <Setter Property="CanUserResizeRows" Value="False"/>
    <Setter Property="CanUserResizeColumns" Value="False"/>
    <Setter Property="CanUserDeleteRows" Value="False"/>
    <Setter Property="CanUserAddRows" Value="False"/>
    <Setter Property="RowStyle">
      <Setter.Value>
        <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
          <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="Transparent"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>