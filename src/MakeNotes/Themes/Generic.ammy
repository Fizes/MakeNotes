using Dragablz
using MakeNotes
using MaterialDesignThemes.Wpf

ResourceDictionary {
    Style Key="MainWindow" {
        TargetType: Window
        #Setter("MinWidth", 640)
        #Setter("MinHeight", 480)
        #Setter("Background", resource "WindowBackgroundBrush")
        #Setter("TextElement.Foreground", resource "MaterialDesignBody")
        #Setter("TextElement.FontSize", 14)
        #Setter("FontFamily", "pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto")
        #Setter("UseLayoutRounding", true)
        #Setter("ResizeMode", "CanResizeWithGrip")
        #Setter("Template", resource dyn "WindowTemplate")
        Setter {
            Property: "WindowChrome.WindowChrome"
            Value: WindowChrome {
                CornerRadius: 0
                GlassFrameThickness: 1
                UseAeroCaptionButtons: false
                NonClientFrameEdges: None
            }
        }
    }

    Style Key="Navbar" {
        TargetType: Grid
        #Setter("Background", resource "NavbarBackgroundBrush")
    }
    
    Style Key="NavbarTitle" {
        TargetType: TextBlock
        #Setter("HorizontalAlignment", "Center")
        #Setter("VerticalAlignment", "Center")
        #Setter("Margin", "0,12,0,6")
        #Setter("FontSize", 20)
    }
    
    Style Key="NavbarTabControl" {
        TargetType: TabablzControl
        BasedOn: resource "MaterialDesignTabablzControlStyle"
        #Setter("Margin", "0,-0.5,0,0.5")
        #Setter("FontSize", 16)
        #Setter("ItemContainerStyle", resource "NavbarTabControlItemContainerStyle")
        Setter {
            Property: "ContentTemplate"
            Value: DataTemplate {} // Empty content
        }
    }
    
    Style Key="NavbarPopupBox" {
        TargetType: PopupBox
        BasedOn: resource "MaterialDesignPopupBox"
        #Setter("HorizontalAlignment", "Right")
        #Setter("VerticalAlignment", "Center")
        #Setter("PlacementMode", "BottomAndAlignRightEdges")
        #Setter("Margin", "12,12,12,6")
        #Setter("StaysOpen", false)
    }

    Style Key="TransparentMiniButton" {
        TargetType: Button
        BasedOn: resource "MaterialDesignFloatingActionMiniButton"
        #Setter("Background", "Transparent")
        #Setter("BorderBrush", "Transparent")
        #Setter("Height", 24)
        #Setter("Width", 24)
        Triggers: [
            Trigger {
                Property: "IsMouseOver"
                Value: true
            	Setter {
                    Property: "Background"
                    Value: SolidColorBrush {
                        Color: "White"
                        Opacity: "0.1"
                    }
                }
            }
        ]
    }

    Style Key="NavbarAddTabButton" {
        TargetType: Button
        BasedOn: resource "TransparentMiniButton"
        #Setter("Margin", "10,0,10,3")
        #Setter("HorizontalAlignment", "Left")
        #Setter("ToolTip", "Add new tab")
        Setter {
            Property: "Content"
            Value: PackIconExtension {
                Kind: "Plus"
                Size: 20
            }
        }
    }

    Style Key="RegularFloatingActionPopupBox" {
        TargetType: PopupBox
        BasedOn: resource "MaterialDesignMultiFloatingActionPopupBox"
        #Setter("Background", resource "ActionPopupBoxBackgroundBrush")
        #Setter("BorderBrush", resource "ActionPopupBoxBackgroundBrush")
        #Setter("PlacementMode", "TopAndAlignCentres")
        #Setter("HorizontalAlignment", "Right")
        #Setter("VerticalAlignment", "Bottom")
        #Setter("Margin", "18")
    }

    Style Key="DataGridAddRowButton" {
        TargetType: Button
        BasedOn: resource "MaterialDesignRaisedAccentButton"
        #Setter("BorderBrush", resource "SecondaryButtonBorderBrush")
        #Setter("BorderThickness", 1)
        #Setter("Background", "Transparent")
        #Setter("Foreground", resource "SecondaryButtonForegroundBrush")
        Triggers: [
           Trigger {
               Property: "IsMouseOver"
               Value: true
               #Setter("Background", "#F6F9FE")
           }
        ]
    }

    Style Key="DataGridTextColumnEditingStyle" {
        TargetType: TextBox
        BasedOn: resource "MaterialDesignTextBox"
        #Setter("Validation.ErrorTemplate", null)
        #Setter("VerticalAlignment", "Center")
        #Setter("Padding", "0,-1")
        Setter {
            Property: "DataGridCell.ToolTip"
            Value: "{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"
        }
    }
    
    Style Key="DataGridTextColumnElementStyle" {
        TargetType: TextBlock
        Setter {
            Property: "Validation.ErrorTemplate"
            Value: ControlTemplate {
                Grid {
                    ToolTipService.InitialShowDelay: 0
                    ToolTip: "{Binding .CurrentItem.ErrorContent}"
                    Background: Transparent
    
                    PackIcon {
                        Foreground: resource "ValidationErrorBrush"
                        Kind: "AlertCircleOutline"
                    }
                }
            }
        }
        Triggers: [
            @Trigger("IsMouseOver", true) {
                #Setter("Cursor", "IBeam")
            }
        ]
    }

    Style Key="DataGridToolButtonCellStyle" {
        TargetType: DataGridCell
        BasedOn: resource "{x:Type DataGridCell}"
        #Setter("Focusable", false)
        #DataGridSelectionHighlightDisabled()
        #DataGridFocusHighlightDisabled()
    }
    
    Style Key="DataGridCellStyle" {
        TargetType: DataGridCell
        BasedOn: resource "{x:Type DataGridCell}"
        #Setter("VerticalContentAlignment", "Center")
        #Setter("HorizontalContentAlignment", "Stretch")
        #Setter("FocusVisualStyle", null)
        Setter {
            Property: "Template"
            Value: ControlTemplate {
                TargetType: DataGridCell
                Border "Border" {
                    BorderBrush: "{TemplateBinding BorderBrush}"
                    BorderThickness: "{TemplateBinding BorderThickness}"
                    Background: "{TemplateBinding Background}"
                    SnapsToDevicePixels: true

                    ContentPresenter {
                        SnapsToDevicePixels: "{TemplateBinding SnapsToDevicePixels}"
                        Margin: "{TemplateBinding Padding}"
                        VerticalAlignment: "{TemplateBinding VerticalContentAlignment}" 
                        HorizontalAlignment: "{TemplateBinding HorizontalContentAlignment}"
                    }
                }
            }
        }
        #DataGridSelectionHighlightDisabled()
        #DataGridFocusHighlightDisabled()
        combine Triggers: [
            MultiTrigger {
                Conditions: [
                    @Condition("IsEditing", true)
                    @Condition("IsKeyboardFocusWithin", true)
                ]
                Setter {
                    Property: "BorderBrush"
                    Value: SolidColorBrush {
                        Color: bind Color from $resource PrimaryHueMidBrush
                        Opacity: 0.55
                    }
                }
            }
        ]
    }

    Style Key="StretchedReadonlyDataGrid" {
        TargetType: DataGrid
        BasedOn: resource "{x:Type DataGrid}"
        #Setter("ColumnWidth", "*")
        #Setter("CanUserReorderColumns", false)
        #Setter("CanUserResizeRows", false)
        #Setter("CanUserResizeColumns", false)
        #Setter("CanUserDeleteRows", false)
        #Setter("CanUserAddRows", false)
        Setter {
            Property: "RowStyle"
            Value: Style {
                TargetType: DataGridRow
                BasedOn: resource "{x:Type DataGridRow}"
                #DataGridSelectionHighlightDisabled()
            }
        }
    }
}