using Dragablz
using MakeNotes.Framework.Controls
using MaterialDesignThemes.Wpf

ResourceDictionary {
    ControlTemplate Key="NavbarFloatingActionMiniButtonTemplate" {
        TargetType: ButtonBase
        Grid {
            AdornerDecorator {
                Ellipse "HighlightBackground" {
                    Fill: "{TemplateBinding Background}"
                    Stroke: "{TemplateBinding BorderBrush}"
                    StrokeThickness: "{TemplateBinding BorderThickness}"
                }
            }
            Ripple {
                Content: resource "DeleteTabIcon"
                ContentTemplate: "{TemplateBinding ContentTemplate}"
                Focusable: false
                ClipToBounds: true
                HorizontalContentAlignment: "{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment: "{TemplateBinding VerticalContentAlignment}"
                Padding: "{TemplateBinding Padding}"
                SnapsToDevicePixels: "{TemplateBinding SnapsToDevicePixels}"
            }
        }
        Triggers: [
            Trigger {
                Property: "Button.IsDefaulted"
                Value: true
            	#Setter("Stroke", resource dyn SystemColors.HighlightBrushKey, "HighlightBackground")
            }
            Trigger {
                Property: "IsEnabled"
                Value: false
            	#Setter("Opacity", 0.33)
            }
            Trigger {
                Property: "IsMouseOver"
                Value: true
            	#Setter("Opacity", 0.2, "HighlightBackground")
            }
            Trigger {
                Property: "IsMouseOver"
                Value: false
            	#Setter("Opacity", 0, "HighlightBackground")
            }
            Trigger {
            	Property: "IsPressed"
            	Value: true
            	#Setter("Opacity", "0.26", "HighlightBackground")
            }
        ]
    }

    Style Key="NavbarDeleteTabButton" {
        TargetType: ButtonBase
        BasedOn: resource "MaterialDesignFloatingActionMiniButton"
        #Setter("Background", "White")
        #Setter("BorderBrush", "Transparent")
        #Setter("Height", 18)
        #Setter("Width", 18)
        #Setter("Margin", "0,1,4,0")
        #Setter("ToolTip", "Delete tab")
        #Setter("Template", resource "NavbarFloatingActionMiniButtonTemplate")
    }

    Style Key="NavbarTabControlItemContainerStyle" {
        TargetType: DragablzItem
        BasedOn: resource "MaterialDesignDragableTabItemStyle"
        Setter {
            Property: "Template"
            Value: ControlTemplate {
                TargetType: DragablzItem
                Grid "TemplateRoot" {
                    SnapsToDevicePixels: true
                    #TwoRows("*", "Auto")
        
                    Border {
                        BorderBrush: "{TemplateBinding BorderBrush}"
                        Background: "{TemplateBinding Background}"
                        Margin: "0"

                        Ripple {
                            HorizontalContentAlignment: Stretch
                            VerticalAlignment: Stretch
                            Feedback: bind Foreground from $this
                            RippleAssist.IsDisabled: bind IsMouseOver from "CloseButton"

                            Grid {
                                #TwoColumns("*", "Auto")
        
                                ContentPresenter "ContentContainer" {
                                    Content: "{TemplateBinding ContentControl.Content}"
                                    ContentTemplate: "{TemplateBinding ContentControl.ContentTemplate}"
                                    ContentStringFormat: "{TemplateBinding ContentControl.ContentStringFormat}"
                                    HorizontalAlignment: "{TemplateBinding Control.HorizontalContentAlignment}"
                                    VerticalAlignment: "{TemplateBinding Control.VerticalContentAlignment}"
                                    SnapsToDevicePixels: "{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    Margin: "{TemplateBinding Control.Padding}"
                                    Opacity: 0.87
                                }
                                Thumb "PART_Thumb" {
                                    Grid.Column: 0
                                    HorizontalAlignment: Stretch
                                    VerticalContentAlignment: Stretch
                                    Style: resource "MaterialDesignInvisibleThumbStyle"
                                }
                                Button "CloseButton" {
                                    Grid.Column: 1
                                    ShadowAssist.ShadowDepth: Depth0
                                    Style: resource dyn "NavbarDeleteTabButton"
                                    Command: "{Binding (ns1:TabablzControlAssist.CloseTabCommand), RelativeSource={RelativeSource Self}}"
                                    CommandParameter: bind
                                }
                            }
                        }
                    }

                    Border "SelectionHighlightBorder" {
                        Grid.Row: 1
                        Height: 2
                        Background: resource "NavbarSecondaryBackgroundBrush"
                        Visibility: Hidden
                    }
                }
                Triggers: [
                    Trigger {
                        Property: TabablzControl.IsWrappingTabItem
                        Value: true
                        Setter {
                            TargetName: "ContentContainer"
                            Property: "Content"
                            Value: bind DataContext.Header from $template
                        }
                    }
                    Trigger {
                        Property: "IsSelected"
                        Value: true
                        #Setter("Opacity", 1, "ContentContainer")
                        #Setter("Visibility", "Visible", "SelectionHighlightBorder")
                    }
                ]
            }
        }
    }
}